---
import { type CollectionEntry, getCollection } from 'astro:content'
import BlogPost from '@/layouts/BlogPost'
import Code from '@/components/mdx/Code'
import ListRelatedPosts from '@/components/ListRelatedPosts'
import Share from '@/components/Share'
import TableOfContents from '@/components/TableOfContents'
import { getPosts } from '@/utils'
import SButton from '@/components/mdx/SButton'
import Disqus from '@/components/Disqus'
import { disqusConfig } from '@/data/disqus.config'
import MenuIcon from '@/components/icons/MenuIcon'

const posts = await getCollection('blog')
export async function getStaticPaths() {
	const posts = await getPosts()

	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post
	}))
}
type Props = CollectionEntry<'blog'>

const post = Astro.props
const MAX_POSTS = 3
const getRelatedPosts = (post: Props) => {
	const lowercaseTags = post.data.tags.map((tag) => tag.toLowerCase())
	const relatedPosts = posts.filter(
		(p) => p.slug !== post.slug && p.data.tags.some((t) => lowercaseTags.includes(t.toLowerCase()))
	)
	return relatedPosts.slice(0, MAX_POSTS)
}

const relatedPosts = getRelatedPosts(post)

const { Content, headings, remarkPluginFrontmatter } = await post.render()

const disqusEnabled = disqusConfig.enabled
---

<BlogPost
	id={post.id}
	data={post.data}
	headings={headings}
	readTime={remarkPluginFrontmatter.minutesRead}
>
	<div class='flex flex-wrap bg-grey-light min-h-screen'>
		<div id='main' class='grid grid-cols-1 md:grid-cols-[20%_auto] gap-10 mt-8'>
			<!-- aside  -->
			<aside id='navbar' class='text-lg p-6 bg-grey-lighter shadow-md'>
				<Share />
				<button id='menu-switch' class='focus:outline-none'>
					<MenuIcon />
				</button>
				<div
					id='sidebar'
					class='sticky top-24 self-start hidden md:block transition-all duration-200'
				>
					{headings && headings.length > 0 && <TableOfContents {headings} />}
				</div>
			</aside>

			<!-- post -->
			<article class='max-w-full w-full'>
				<div class='prose prose-lg md:prose-xl dark:prose-invert mb-12 min-w-full'>
					<Content components={{ pre: Code, SButton }} />
				</div>

				<!-- related posts -->
				<footer>
					<h2 class='font-bold text-lg dark:text-white mb-6'>Related Posts</h2>
					<ListRelatedPosts posts={relatedPosts} />
				</footer>
			</article>
		</div>
	</div>
	{disqusEnabled && <Disqus />}
</BlogPost>
<script type='text/javascript'>
	;(function () {
		let menuSwitch = document.querySelector('#menu-switch'),
			sidebar = document.querySelector('#sidebar'),
			main = document.querySelector('#main')

		function toggleSidebar() {
			let classesToApplyForSidebar = {
					active: [],
					inactive: ['sidebar-inactive']
				},
				classesToApplyForMain = {
					active: [],
					inactive: []
				},
				classesToApplyForMenuButton = {
					active: ['fa-times-circle', 'text-red-light'],
					inactive: ['fa-bars']
				}

			let isMenuActive = menuSwitch.getAttribute('data-menu-active') === 'true'

			if (isMenuActive) {
				menuSwitch.setAttribute('data-menu-active', null)

				menuSwitch.children[0].classList.remove(...classesToApplyForMenuButton.active)
				menuSwitch.children[0].classList.add(...classesToApplyForMenuButton.inactive)

				sidebar.classList.remove(...classesToApplyForSidebar.active)
				sidebar.classList.add(...classesToApplyForSidebar.inactive)

				main.classList.remove(...classesToApplyForMain.active)
				main.classList.add(...classesToApplyForMain.inactive)
			} else {
				menuSwitch.setAttribute('data-menu-active', true)

				menuSwitch.children[0].classList.add(...classesToApplyForMenuButton.active)
				menuSwitch.children[0].classList.remove(...classesToApplyForMenuButton.inactive)

				sidebar.classList.add(...classesToApplyForSidebar.active)
				sidebar.classList.remove(...classesToApplyForSidebar.inactive)

				main.classList.add(...classesToApplyForMain.active)
				main.classList.remove(...classesToApplyForMain.inactive)
			}
		}

		document.querySelector('#menu-switch').addEventListener('click', (e) => {
			e.preventdefault
			toggleSidebar()
		})

		toggleSidebar()
		setTimeout(() => {
			sidebar.classList.add('slow-moves')
			main.classList.add('slow-moves')
		}, 300)
	})()
</script>
<style>
	.slow-moves {
		transition: 0.3s;
	}

	.sidebar-inactive {
		transform: translateX(-200%);
	}
</style>
